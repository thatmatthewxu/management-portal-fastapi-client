# coding: utf-8

"""
    core

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Quota(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Quota Model in OpenStack
    """


    class MetaOapg:
        required = {
            "injected_file_content_bytes",
            "instances",
            "gigabytes",
            "server_group_members",
            "server_groups",
            "volumes",
            "networks",
            "ports",
            "key_pairs",
            "injected_files",
            "snapshots",
            "security_groups",
            "cores",
            "metadata_items",
            "subnets",
            "injected_file_path_bytes",
            "routers",
            "floating_ips",
            "ram",
            "security_group_rules",
        }
        
        class properties:
            volumes = schemas.IntSchema
            snapshots = schemas.IntSchema
            gigabytes = schemas.IntSchema
            instances = schemas.IntSchema
            cores = schemas.IntSchema
            ram = schemas.IntSchema
            server_groups = schemas.IntSchema
            server_group_members = schemas.IntSchema
            metadata_items = schemas.IntSchema
            key_pairs = schemas.IntSchema
            injected_files = schemas.IntSchema
            injected_file_content_bytes = schemas.IntSchema
            injected_file_path_bytes = schemas.IntSchema
            networks = schemas.IntSchema
            subnets = schemas.IntSchema
            ports = schemas.IntSchema
            routers = schemas.IntSchema
            floating_ips = schemas.IntSchema
            security_groups = schemas.IntSchema
            security_group_rules = schemas.IntSchema
            __annotations__ = {
                "volumes": volumes,
                "snapshots": snapshots,
                "gigabytes": gigabytes,
                "instances": instances,
                "cores": cores,
                "ram": ram,
                "server_groups": server_groups,
                "server_group_members": server_group_members,
                "metadata_items": metadata_items,
                "key_pairs": key_pairs,
                "injected_files": injected_files,
                "injected_file_content_bytes": injected_file_content_bytes,
                "injected_file_path_bytes": injected_file_path_bytes,
                "networks": networks,
                "subnets": subnets,
                "ports": ports,
                "routers": routers,
                "floating_ips": floating_ips,
                "security_groups": security_groups,
                "security_group_rules": security_group_rules,
            }
    
    injected_file_content_bytes: MetaOapg.properties.injected_file_content_bytes
    instances: MetaOapg.properties.instances
    gigabytes: MetaOapg.properties.gigabytes
    server_group_members: MetaOapg.properties.server_group_members
    server_groups: MetaOapg.properties.server_groups
    volumes: MetaOapg.properties.volumes
    networks: MetaOapg.properties.networks
    ports: MetaOapg.properties.ports
    key_pairs: MetaOapg.properties.key_pairs
    injected_files: MetaOapg.properties.injected_files
    snapshots: MetaOapg.properties.snapshots
    security_groups: MetaOapg.properties.security_groups
    cores: MetaOapg.properties.cores
    metadata_items: MetaOapg.properties.metadata_items
    subnets: MetaOapg.properties.subnets
    injected_file_path_bytes: MetaOapg.properties.injected_file_path_bytes
    routers: MetaOapg.properties.routers
    floating_ips: MetaOapg.properties.floating_ips
    ram: MetaOapg.properties.ram
    security_group_rules: MetaOapg.properties.security_group_rules
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumes"]) -> MetaOapg.properties.volumes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshots"]) -> MetaOapg.properties.snapshots: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gigabytes"]) -> MetaOapg.properties.gigabytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instances"]) -> MetaOapg.properties.instances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cores"]) -> MetaOapg.properties.cores: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server_groups"]) -> MetaOapg.properties.server_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server_group_members"]) -> MetaOapg.properties.server_group_members: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata_items"]) -> MetaOapg.properties.metadata_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_pairs"]) -> MetaOapg.properties.key_pairs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["injected_files"]) -> MetaOapg.properties.injected_files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["injected_file_content_bytes"]) -> MetaOapg.properties.injected_file_content_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["injected_file_path_bytes"]) -> MetaOapg.properties.injected_file_path_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["networks"]) -> MetaOapg.properties.networks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subnets"]) -> MetaOapg.properties.subnets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ports"]) -> MetaOapg.properties.ports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routers"]) -> MetaOapg.properties.routers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floating_ips"]) -> MetaOapg.properties.floating_ips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security_groups"]) -> MetaOapg.properties.security_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security_group_rules"]) -> MetaOapg.properties.security_group_rules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["volumes", "snapshots", "gigabytes", "instances", "cores", "ram", "server_groups", "server_group_members", "metadata_items", "key_pairs", "injected_files", "injected_file_content_bytes", "injected_file_path_bytes", "networks", "subnets", "ports", "routers", "floating_ips", "security_groups", "security_group_rules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumes"]) -> MetaOapg.properties.volumes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshots"]) -> MetaOapg.properties.snapshots: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gigabytes"]) -> MetaOapg.properties.gigabytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instances"]) -> MetaOapg.properties.instances: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cores"]) -> MetaOapg.properties.cores: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ram"]) -> MetaOapg.properties.ram: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server_groups"]) -> MetaOapg.properties.server_groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server_group_members"]) -> MetaOapg.properties.server_group_members: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata_items"]) -> MetaOapg.properties.metadata_items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_pairs"]) -> MetaOapg.properties.key_pairs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["injected_files"]) -> MetaOapg.properties.injected_files: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["injected_file_content_bytes"]) -> MetaOapg.properties.injected_file_content_bytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["injected_file_path_bytes"]) -> MetaOapg.properties.injected_file_path_bytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["networks"]) -> MetaOapg.properties.networks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subnets"]) -> MetaOapg.properties.subnets: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ports"]) -> MetaOapg.properties.ports: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routers"]) -> MetaOapg.properties.routers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floating_ips"]) -> MetaOapg.properties.floating_ips: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security_groups"]) -> MetaOapg.properties.security_groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security_group_rules"]) -> MetaOapg.properties.security_group_rules: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["volumes", "snapshots", "gigabytes", "instances", "cores", "ram", "server_groups", "server_group_members", "metadata_items", "key_pairs", "injected_files", "injected_file_content_bytes", "injected_file_path_bytes", "networks", "subnets", "ports", "routers", "floating_ips", "security_groups", "security_group_rules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        injected_file_content_bytes: typing.Union[MetaOapg.properties.injected_file_content_bytes, decimal.Decimal, int, ],
        instances: typing.Union[MetaOapg.properties.instances, decimal.Decimal, int, ],
        gigabytes: typing.Union[MetaOapg.properties.gigabytes, decimal.Decimal, int, ],
        server_group_members: typing.Union[MetaOapg.properties.server_group_members, decimal.Decimal, int, ],
        server_groups: typing.Union[MetaOapg.properties.server_groups, decimal.Decimal, int, ],
        volumes: typing.Union[MetaOapg.properties.volumes, decimal.Decimal, int, ],
        networks: typing.Union[MetaOapg.properties.networks, decimal.Decimal, int, ],
        ports: typing.Union[MetaOapg.properties.ports, decimal.Decimal, int, ],
        key_pairs: typing.Union[MetaOapg.properties.key_pairs, decimal.Decimal, int, ],
        injected_files: typing.Union[MetaOapg.properties.injected_files, decimal.Decimal, int, ],
        snapshots: typing.Union[MetaOapg.properties.snapshots, decimal.Decimal, int, ],
        security_groups: typing.Union[MetaOapg.properties.security_groups, decimal.Decimal, int, ],
        cores: typing.Union[MetaOapg.properties.cores, decimal.Decimal, int, ],
        metadata_items: typing.Union[MetaOapg.properties.metadata_items, decimal.Decimal, int, ],
        subnets: typing.Union[MetaOapg.properties.subnets, decimal.Decimal, int, ],
        injected_file_path_bytes: typing.Union[MetaOapg.properties.injected_file_path_bytes, decimal.Decimal, int, ],
        routers: typing.Union[MetaOapg.properties.routers, decimal.Decimal, int, ],
        floating_ips: typing.Union[MetaOapg.properties.floating_ips, decimal.Decimal, int, ],
        ram: typing.Union[MetaOapg.properties.ram, decimal.Decimal, int, ],
        security_group_rules: typing.Union[MetaOapg.properties.security_group_rules, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Quota':
        return super().__new__(
            cls,
            *args,
            injected_file_content_bytes=injected_file_content_bytes,
            instances=instances,
            gigabytes=gigabytes,
            server_group_members=server_group_members,
            server_groups=server_groups,
            volumes=volumes,
            networks=networks,
            ports=ports,
            key_pairs=key_pairs,
            injected_files=injected_files,
            snapshots=snapshots,
            security_groups=security_groups,
            cores=cores,
            metadata_items=metadata_items,
            subnets=subnets,
            injected_file_path_bytes=injected_file_path_bytes,
            routers=routers,
            floating_ips=floating_ips,
            ram=ram,
            security_group_rules=security_group_rules,
            _configuration=_configuration,
            **kwargs,
        )
